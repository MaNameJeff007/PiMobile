<?php

namespace ScolariteBundle\Repository;

/**
 * MoyennesgeneralesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MoyennesgeneralesRepository extends \Doctrine\ORM\EntityRepository
{
    public function insertMG()
    {
        $query = $this->getEntityManager()->createQuery(

            'select b.eleve , b.classe,(sum(b.moyenne) / 3 ) as moy
            from EnseignantBundle:Bulletin b inner join AppBundle:User u with u.id=b.eleve 
              group by b.eleve  having count(b.eleve) =3'
        );
        return $products = $query->getArrayResult();
    }

    public function selectMG()
    {
        $query = $this->getEntityManager()->createQuery(

            'select b.eleve , b.classe,(sum(b.moyenne) / 3 ) as moy
            from EnseignantBundle:Bulletin b inner join AppBundle:User u with u.id=b.eleve 
              group by b.eleve  having count(b.eleve) =3'
        );
        return $products = $query->getArrayResult();
    }

    public function getNumberEleveParClasse($classe,$tr)
    { //select count(u.id) from AppBundle:User u where u.classedeseleves= :el
        $query = $this->getEntityManager()->createQuery(

            'select count(u.id) from EnseignantBundle:Bulletin u 
            inner join ScolariteBundle:Classe c with c.id=u.classe 
            where c.libelle= :el and u.trimestre= :t'
        )
            ->setParameters([
                'el'=> $classe,
                't' => $tr,

            ]);

        return $products = $query->getResult();
    }

    public function countMoyennesgenerales($classe)
    {
        $query = $this->getEntityManager()->createQuery(

            'select count(u.id) from ScolariteBundle:Moyennesgenerales u where u.classe= :el '
        )
            ->setParameter('el', $classe);
        return $products = $query->getResult();
    }

    public function StatMGC1R($classe,$ne)
    {
        $query = $this->getEntityManager()->createQuery(

            'SELECT (COUNT(b.moyG) / :nb )*100  as pourcentage 
                     FROM ScolariteBundle:Moyennesgenerales b inner join ScolariteBundle:Classe c with c.id=b.classe where b.moyG < 10 and c.libelle= :n '
        )
            ->setParameters([
                'nb'=> $ne,
                'n' => $classe,

            ]);
        return $products = $query->getArrayResult();
    }

    public function StatMGC2R($classe,$ne)
    {
        $query = $this->getEntityManager()->createQuery(

            'SELECT (COUNT(b.moyG) / :nb )*100  as pourcentage 
                     FROM ScolariteBundle:Moyennesgenerales b inner join ScolariteBundle:Classe c with c.id=b.classe where b.moyG BETWEEN 10.1 and 12 and c.libelle= :n '
        )
            ->setParameters([
                'nb'=> $ne,
                'n' => $classe,

            ]);
        return $products = $query->getArrayResult();
    }

    public function StatMGC3R($classe,$ne)
    {
        $query = $this->getEntityManager()->createQuery(

            'SELECT (COUNT(b.moyG) / :nb )*100  as pourcentage 
                     FROM ScolariteBundle:Moyennesgenerales b inner join ScolariteBundle:Classe c with c.id=b.classe where b.moyG BETWEEN 12.1 and 15 and c.libelle= :n '
        )
            ->setParameters([
                'nb'=> $ne,
                'n' => $classe,

            ]);
        return $products = $query->getArrayResult();
    }

    public function StatMGC4R($classe,$ne)
    {
        $query = $this->getEntityManager()->createQuery(

            'SELECT (COUNT(b.moyG) / :nb )*100  as pourcentage 
                     FROM ScolariteBundle:Moyennesgenerales b inner join ScolariteBundle:Classe c with c.id=b.classe where b.moyG > 15.1 and c.libelle= :n '
        )
            ->setParameters([
                'nb'=> $ne,
                'n' => $classe,

            ]);
        return $products = $query->getArrayResult();
    }

    public function StatMT2R($classe,$tr,$ne)
    {
        $query = $this->getEntityManager()->createQuery(

            'SELECT (COUNT(b.moyenne) / :nb )*100  as pourcentage 
                     FROM EnseignantBundle:Bulletin b inner join ScolariteBundle:Classe c with c.id=b.classe where b.moyenne BETWEEN 10 and 14 and c.libelle= :n and b.trimestre= :m '
        )
            ->setParameters([
                'nb'=> $ne,
                'n' => $classe,
                'm' => $tr


            ]);
        return $products = $query->getArrayResult();
    }

    public function StatMT1R($classe,$tr,$ne)
    {
        $query = $this->getEntityManager()->createQuery(

            'SELECT (COUNT(b.moyenne) / :nb )*100  as pourcentage 
                     FROM EnseignantBundle:Bulletin b inner join ScolariteBundle:Classe c with c.id=b.classe where b.moyenne < 10  and c.libelle= :n and b.trimestre= :m '
        )
            ->setParameters([
                'nb'=> $ne,
                'n' => $classe,
                'm' => $tr
            ]);
        return $products = $query->getArrayResult();
    }

    public function StatMT3R($classe,$tr,$ne)
    {
        $query = $this->getEntityManager()->createQuery(

            'SELECT (COUNT(b.moyenne) / :nb )*100  as pourcentage 
                     FROM EnseignantBundle:Bulletin b inner join ScolariteBundle:Classe c with c.id=b.classe where b.moyenne > 14  and c.libelle= :n and b.trimestre= :m '
        )
            ->setParameters([
                'nb'=> $ne,
                'n' => $classe,
                'm' => $tr
            ]);
        return $products = $query->getArrayResult();
    }
}
